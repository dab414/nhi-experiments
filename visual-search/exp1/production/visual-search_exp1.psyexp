<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2021.1.4">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'session': '001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="list"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="2" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1920, 1080]" valType="list"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0.75,0.75,0.75]" valType="color"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="visual-search_exp1" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="trial1">
      <CodeComponent name="FrameCode">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="lineWidth = 4&amp;#10;&amp;#10;dhg = DrawHexGrid([-400, 400])&amp;#10;&amp;#10;dhg.make_grid()&amp;#10;&amp;#10;psychopy.event.waitKeys(keyList = ['space'])&amp;#10;&amp;#10;win.flip()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="FrameCode" valType="code"/>
      </CodeComponent>
      <CodeComponent name="GlobalDefinitions">
        <Param name="Before Experiment" updates="constant" val="import psychopy&amp;#10;&amp;#10;## print_line_widths&amp;#10;## ^ flag for troubleshooting&amp;#10;&amp;#10;class DrawHexGrid:&amp;#10;    '''&amp;#10;    The general idea here is to think, for any given hexagon I want to draw, what position (eg, top left) in the hex am i starting at, what position do i want to finish at, and what's the starting coordinate&amp;#10;    Given this information, we rely on the formulas below to draw however many lines are needed to connect the starting position to the ending position&amp;#10;    In the process, I save out starting coordinates that will be used for the next hexagon and for the first hexagon in a new row, as well as handling some other edge case things&amp;#10;    &amp;#10;    Formula for calculating coordinates:&amp;#10;    xx = x + (d * cos(alpha))&amp;#10;    yy = y + (d * sin(alpha))&amp;#10;    '''&amp;#10;    def __init__(self, top_left_origin, edge_length = 120, x_count = 4, y_count = 4):&amp;#10;        ## print_line_widths&amp;#10;        self.build_diagnostic_container = True&amp;#10;        self.build_diagnostic_count = 0&amp;#10;        self.diagnostic_container = []&amp;#10;        self.diagnostic_widths = []&amp;#10;        &amp;#10;        self.top_left_origin = top_left_origin&amp;#10;        self.edge_length = edge_length&amp;#10;        self. x_count = x_count&amp;#10;        self.y_count = y_count&amp;#10;        self.point_list = ['top_left', 'bottom_left', 'bottom', 'bottom_right', 'top_right', 'top']&amp;#10;        self.point_dictionary = {&amp;#10;'top_left': '[start_coord[0], start_coord[1] - self.edge_length]',&amp;#10;'bottom_left': '[start_coord[0] + self.edge_length * cos(120), start_coord[1] - self.edge_length * sin(120)]',&amp;#10;'bottom': '[start_coord[0] + self.edge_length * cos(120), start_coord[1] + self.edge_length * sin(120)]',&amp;#10;'bottom_right': '[start_coord[0], start_coord[1] + self.edge_length]',&amp;#10;'top_right': '[start_coord[0] - self.edge_length * cos(120), start_coord[1] + self.edge_length * sin(120)]',&amp;#10;'top': '[start_coord[0] - self.edge_length * cos(120), start_coord[1] - self.edge_length * sin(120)]'&amp;#10;}&amp;#10;        &amp;#10;    def make_grid(self):&amp;#10;        for row in range(self.y_count):&amp;#10;            for col in range(self.x_count):&amp;#10;                ## print_line_widths&amp;#10;                self.row = row&amp;#10;                self.col = col&amp;#10;                &amp;#10;                ## if it's the first hex&amp;#10;                if not row and not col:&amp;#10;                    ## print_line_widths&amp;#10;                    if self.build_diagnostic_count:&amp;#10;                        self.build_diagnostic_container = False&amp;#10;                    else:&amp;#10;                        self.build_diagnostic_count += 1&amp;#10;                    &amp;#10;                    ## reset the line width drawer&amp;#10;                    self.line_width_container_draw = copy.deepcopy(line_width_container_original)&amp;#10;                    &amp;#10;                    self._draw_hex('top_left', 'top_left', self.top_left_origin)&amp;#10;                    self.first_row_start_coord = self._coord_calculator(self.top_left_origin, 'top_left', 2)&amp;#10;                    self.new_hex_start_coord = self._coord_calculator(self.top_left_origin, 'top_left', 3)&amp;#10;                &amp;#10;                ## if it's the first row&amp;#10;                elif not row:&amp;#10;                    self._draw_hex('bottom_left', 'top_left', self.new_hex_start_coord)&amp;#10;                    self.new_hex_start_coord = self._coord_calculator(self.new_hex_start_coord, 'bottom_left', 2)&amp;#10;                    &amp;#10;                ## if it's the first column&amp;#10;                elif not col:&amp;#10;                    &amp;#10;                    ## conditional to account for the staggered pattern&amp;#10;                    if not row % 2:&amp;#10;                    ## if even&amp;#10;                        start_pos = 'top'&amp;#10;                        new_hex_n_turns = 4&amp;#10;                        first_row_n_turns = 3&amp;#10;                        &amp;#10;                    else:&amp;#10;                    ## if odd&amp;#10;                        start_pos = 'top_left'&amp;#10;                        new_hex_n_turns = 3&amp;#10;                        first_row_n_turns = 1&amp;#10;                        &amp;#10;                    self._draw_hex(start_pos, 'top_right', self.first_row_start_coord)&amp;#10;                    self.new_hex_start_coord = self._coord_calculator(self.first_row_start_coord, start_pos, new_hex_n_turns)&amp;#10;                    self.first_row_start_coord = self._coord_calculator(self.first_row_start_coord, start_pos, first_row_n_turns)&amp;#10;                    &amp;#10;                ## for all internal hex's&amp;#10;                else:&amp;#10;                    ## catch the last hex on odd rows&amp;#10;                    if col == self.x_count - 1 and row % 2:&amp;#10;                        end_pos = 'top'&amp;#10;                    else:&amp;#10;                        end_pos = 'top_right'&amp;#10;&amp;#10;                    self._draw_hex('bottom_left', end_pos, self.new_hex_start_coord)&amp;#10;                    self.new_hex_start_coord = self._coord_calculator(self.new_hex_start_coord, 'bottom_left', 2)&amp;#10;&amp;#10;        win.flip(clearBuffer = False)&amp;#10;                    &amp;#10;    def _coord_calculator(self, start_coord, start_pos, n_turns):&amp;#10;        ## takes in a starting coordinate, starting pos, and number of calcs to do&amp;#10;        ## returns ending coord as [x, y]&amp;#10;        ## this function will fail if you try to turn past top left, which i dont think ill need to do&amp;#10;        &amp;#10;        ## calc a slice out of point_list to iterate over what's appropriate&amp;#10;        new_point_list = self._rearrange_point_list(start_pos)&amp;#10;        &amp;#10;        for pos in new_point_list[:n_turns]:&amp;#10;            start_coord = eval(self.point_dictionary[pos])&amp;#10;        &amp;#10;        return start_coord&amp;#10;            &amp;#10;            &amp;#10;    &amp;#10;    def _draw_hex(self, start_pos, end_pos, start_coord):&amp;#10;        ## print_line_widths&amp;#10;&amp;#10;        &amp;#10;        ## draws a line from start_pos to end_pos&amp;#10;        new_point_list = self._rearrange_point_list(start_pos)&amp;#10;&amp;#10;        for position in new_point_list:&amp;#10;            if start_pos != end_pos and position == end_pos:&amp;#10;                break&amp;#10;                &amp;#10;            if self.build_diagnostic_container:&amp;#10;                self.diagnostic_container.append(['{}-{}-{}'.format(self.col, self.row, start_pos)])&amp;#10;            &amp;#10;            line = self._define_line_type()&amp;#10;            line.start = start_coord&amp;#10;            line.end = eval(self.point_dictionary[position])&amp;#10;            start_coord= line.end&amp;#10;            line.draw()&amp;#10;            #win.flip(clearBuffer = False)&amp;#10;&amp;#10;    def _rearrange_point_list(self, start_pos):&amp;#10;        ## outputs a list where the first element is start_pos and the last element is the one before start_pos in point_list&amp;#10;&amp;#10;        if start_pos == 'top_left':&amp;#10;            return self.point_list&amp;#10;&amp;#10;        return self.point_list[self.point_list.index(start_pos):] + self.point_list[:self.point_list.index(start_pos)-1]&amp;#10;&amp;#10;    def _define_line_type(self):&amp;#10;        if not self.line_width_container_draw:&amp;#10;            self.line_width_container_draw = copy.deepcopy(line_width_container_original)&amp;#10;        #lineWidth = self.line_width_container_draw.pop(0)&amp;#10;        ## print_line_widths&amp;#10;        lineWidth = self.line_width_container_draw[0]&amp;#10;        if lineWidth is None:&amp;#10;            self.diagnostic_widths = self.line_width_container_draw&amp;#10;        else:&amp;#10;            del self.line_width_container_draw[0]&amp;#10;        &amp;#10;        ## print_line_widths&amp;#10;        if self.build_diagnostic_container:&amp;#10;            self.diagnostic_container[-1].append(lineWidth)&amp;#10;            &amp;#10;        return psychopy.visual.Line(&amp;#10;            lineWidth = lineWidth,&amp;#10;            win = win,&amp;#10;            units='pix',&amp;#10;            lineColor=[-1, -1, -1]&amp;#10;            )&amp;#10;" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="GlobalDefinitions" valType="code"/>
      </CodeComponent>
      <CodeComponent name="LineWidthCalc">
        <Param name="Before Experiment" updates="constant" val="import copy" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="line_width_container = np.linspace(1, 4, 10)&amp;#10;#line_width_container = [round(x, 4) for x in line_width_container]&amp;#10;&amp;#10;&amp;#10;range_to_width = {}&amp;#10;&amp;#10;percentages = [.02, .07, .07] + [.17]*4 + [.07, .07, .02]&amp;#10;&amp;#10;base_percentage = 0&amp;#10;for percentage, line_width in zip(percentages, line_width_container):&amp;#10;    range_to_width[base_percentage, base_percentage+percentage] = line_width&amp;#10;    base_percentage += percentage +.000001&amp;#10;    &amp;#10;&amp;#10;def choose_line_width():&amp;#10;    ## draw random from uniform distribution, choose line width&amp;#10;    random_number  = round(np.random.uniform(), 3)&amp;#10;    for key in range_to_width:&amp;#10;        if random_number &gt;= key[0]  and random_number &lt; key[1]:&amp;#10;            return range_to_width[key]&amp;#10;&amp;#10;&amp;#10;## initialize full container&amp;#10;line_width_container_original = []&amp;#10;&amp;#10;for i in range(400):&amp;#10;    line_width_container_original.append(choose_line_width())&amp;#10;    &amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="line_width_container_original = []&amp;#10;&amp;#10;for i in range(400):&amp;#10;    line_width_container_original.append(choose_line_width())&amp;#10;    &amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="LineWidthCalc" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="trial2">
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="'y','n','left','right','space'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="num"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="trial2_2">
      <KeyboardComponent name="key_resp_3">
        <Param name="allowedKeys" updates="constant" val="'y','n','left','right','space'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="num"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="line = psychopy.visual.Line(&amp;#10;    win=win,&amp;#10;    units=&quot;pix&quot;,&amp;#10;    lineColor=[-1, -1, -1]&amp;#10;)&amp;#10;&amp;#10;line.start = [-200, -200]&amp;#10;line.end = [+200, +200]&amp;#10;&amp;#10;line.draw()&amp;#10;&amp;#10;win.flip()&amp;#10;&amp;#10;psychopy.event.waitKeys()&amp;#10;&amp;#10;win.close()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="trial1"/>
    <Routine name="trial2_2"/>
  </Flow>
</PsychoPy2experiment>
