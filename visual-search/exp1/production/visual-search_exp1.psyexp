<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2021.1.4">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant':'', 'session':'001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="list"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="(1024, 768)" valType="list"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="color"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="visual-search_exp1" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="trial1">
      <CodeComponent name="FrameCode">
        <Param name="Before Experiment" updates="constant" val="point_dictionary = {&amp;#10;'top_left': '[line_start[0], line_start[1] - self.edge_length]',&amp;#10;'bottom_left': '[line_start[0] + self.edge_length * cos(120), line_start[1] - self.edge_length * sin(120)]',&amp;#10;'bottom': '[line_start[0] + self.edge_length * cos(120), line_start[1] + self.edge_length * sin(120)]',&amp;#10;'bottom_right': '[line_start[0], line_start[1] + self.edge_length]',&amp;#10;'top_right': '[line_start[0] - self.edge_length * cos(120), line_start[1] + self.edge_length * sin(120)]',&amp;#10;'top': '[line_start[0] - self.edge_length * cos(120), line_start[1] - self.edge_length * sin(120)]'&amp;#10;}&amp;#10;&amp;#10;&amp;#10;class DrawHexGrid:&amp;#10;    &amp;#10;    def __init__(self, top_left_origin, edge_length = 25, x_count = 6, y_count = 6):&amp;#10;        self.top_left_origin = top_left_origin&amp;#10;        self.edge_length = edge_length&amp;#10;        self. x_count = x_count&amp;#10;        self.y_count = y_count&amp;#10;        &amp;#10;    def draw_top_left(self):&amp;#10;        line_start = self.top_left_origin&amp;#10;        for position in point_dictionary:&amp;#10;            line = self.define_line_type()&amp;#10;            line.start = line_start&amp;#10;            line.end = eval(point_dictionary[position])&amp;#10;            line_start = line.end&amp;#10;            line.draw()&amp;#10;&amp;#10;    def define_line_type(self):&amp;#10;        return psychopy.visual.Line(&amp;#10;            win = win,&amp;#10;            units='pix',&amp;#10;            lineColor=[-1, -1, -1]&amp;#10;            )&amp;#10;" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="import psychopy" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="## xx = x + (d * cos(alpha))&amp;#10;## yy = y + (d * sin(alpha))&amp;#10;&amp;#10;dhg = DrawHexGrid([-200, 200])&amp;#10;&amp;#10;dhg.draw_top_left()&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="FrameCode" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" updates="constant" val="'y','n','left','right','space'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="num"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="GlobalDefinitions">
        <Param name="Before Experiment" updates="constant" val="point_dictionary = {&amp;#10;'top_left': '[line_start[0], line_start[1] - self.edge_length]',&amp;#10;'bottom_left': '[line_start[0] + self.edge_length * cos(120), line_start[1] - self.edge_length * sin(120)]',&amp;#10;'bottom': '[line_start[0] + self.edge_length * cos(120), line_start[1] + self.edge_length * sin(120)]',&amp;#10;'bottom_right': '[line_start[0], line_start[1] + self.edge_length]',&amp;#10;'top_right': '[line_start[0] - self.edge_length * cos(120), line_start[1] + self.edge_length * sin(120)]',&amp;#10;'top': '[line_start[0] - self.edge_length * cos(120), line_start[1] - self.edge_length * sin(120)]'&amp;#10;}&amp;#10;&amp;#10;&amp;#10;class DrawHexGrid:&amp;#10;    &amp;#10;    def __init__(self, top_left_origin, edge_length = 25, x_count = 6, y_count = 6):&amp;#10;        self.top_left_origin = top_left_origin&amp;#10;        self.edge_length = edge_length&amp;#10;        self. x_count = x_count&amp;#10;        self.y_count = y_count&amp;#10;        &amp;#10;    ## make this a general line drawer&amp;#10;    def draw_top_left(self):&amp;#10;        line_start = self.top_left_origin&amp;#10;&amp;#10;        ## modify the iterable to make it general across all cases&amp;#10;        for position in point_dictionary:&amp;#10;            line = self.define_line_type()&amp;#10;            line.start = line_start&amp;#10;            line.end = eval(point_dictionary[position])&amp;#10;            line_start = line.end&amp;#10;            line.draw()&amp;#10;&amp;#10;    def define_line_type(self):&amp;#10;        return psychopy.visual.Line(&amp;#10;            win = win,&amp;#10;            units='pix',&amp;#10;            lineColor=[-1, -1, -1]&amp;#10;            )&amp;#10;" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="GlobalDefinitions" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="trial2">
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="'y','n','left','right','space'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="num"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="trial1"/>
  </Flow>
</PsychoPy2experiment>
