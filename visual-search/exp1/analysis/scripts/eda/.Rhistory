#   filter(participant == 90, trial_count == 2) %>%
#   group_by(participant, trial_count) %>%
#   summarize(hits = calc_accuracy(., output = 'hits'), misses = calc_accuracy(., output = 'misses'), false_alarms = calc_accuracy(., output = 'false_alarms'), accuracy = mean(accuracy, na.rm = TRUE)) %>%
#   head()
#new_d <- data.frame(participant = vector(), trial_count = vector(), hits = vector(), false_alarms = vector(), misses = vector(), accuracy = vector())
out  <- vector()
for (participant in unlist(lapply(levels(factor(d$participant)), as.integer))) {
for (trial in 1:99) {
new_col <- c(out, calc_accuracy_columns(d[d$participant == participant & d$trial_count == trial,]))
}
}
length(new_col) == nrow(d)
length(new_col)
new_col
calc_accuracy_columns <- function(d) {
participant <- d$participant[1]
trial <- d$trial_count[1]
thinnest_lines_set <- thinnest_lines[thinnest_lines$participant == participant & thinnest_lines$trial_count == trial,]$line_id
## determine the final three lines they selected
selected_lines <- c(NA, NA, NA)
for (row in 1:(nrow(d))) {
if (d[row,]$selected_or_released == 'selected') {
selected_lines[which(is.na(selected_lines))[1]] <- d[row,]$line_id
} else {
selected_lines[!(is.na(selected_lines)) & selected_lines == d[row,]$line_id] <- NA
}
}
selected_lines_accuracy_column <- ifelse(d$line_id %in% selected_lines & d$line_id %in% thinnest_lines_set, 'hit', 'false_alarm')
return(selected_lines_accuracy_column)
}
# d %>%
#   filter(participant == 90, trial_count == 2) %>%
#   group_by(participant, trial_count) %>%
#   summarize(hits = calc_accuracy(., output = 'hits'), misses = calc_accuracy(., output = 'misses'), false_alarms = calc_accuracy(., output = 'false_alarms'), accuracy = mean(accuracy, na.rm = TRUE)) %>%
#   head()
#new_d <- data.frame(participant = vector(), trial_count = vector(), hits = vector(), false_alarms = vector(), misses = vector(), accuracy = vector())
out  <- vector()
for (participant in unlist(lapply(levels(factor(d$participant)), as.integer))) {
for (trial in 1:99) {
out <- c(out, calc_accuracy_columns(d[d$participant == participant & d$trial_count == trial,]))
}
}
length(new_col) == nrow(d)
length(new_col)
new_col
length(out) == nrow(d)
length(out)
nrow(d)
length(out)
head(d)
calc_accuracy_columns <- function(d) {
participant <- d$participant[1]
trial <- d$trial_count[1]
thinnest_lines_set <- thinnest_lines[thinnest_lines$participant == participant & thinnest_lines$trial_count == trial,]$line_id
## determine the final three lines they selected
selected_lines <- c(NA, NA, NA)
for (row in 1:(nrow(d))) {
if (d[row,]$selected_or_released == 'selected') {
selected_lines[which(is.na(selected_lines))[1]] <- d[row,]$line_id
} else {
selected_lines[!(is.na(selected_lines)) & selected_lines == d[row,]$line_id] <- NA
}
}
selected_lines_accuracy_column <- ifelse(is.na(line_id), NA, ifelse(d$line_id %in% selected_lines & d$line_id %in% thinnest_lines_set, 'hit', 'false_alarm'))
return(selected_lines_accuracy_column)
}
# d %>%
#   filter(participant == 90, trial_count == 2) %>%
#   group_by(participant, trial_count) %>%
#   summarize(hits = calc_accuracy(., output = 'hits'), misses = calc_accuracy(., output = 'misses'), false_alarms = calc_accuracy(., output = 'false_alarms'), accuracy = mean(accuracy, na.rm = TRUE)) %>%
#   head()
#new_d <- data.frame(participant = vector(), trial_count = vector(), hits = vector(), false_alarms = vector(), misses = vector(), accuracy = vector())
out  <- vector()
for (participant in unlist(lapply(levels(factor(d$participant)), as.integer))) {
for (trial in 1:99) {
out <- c(out, calc_accuracy_columns(d[d$participant == participant & d$trial_count == trial,]))
}
}
calc_accuracy_columns <- function(d) {
participant <- d$participant[1]
trial <- d$trial_count[1]
thinnest_lines_set <- thinnest_lines[thinnest_lines$participant == participant & thinnest_lines$trial_count == trial,]$line_id
## determine the final three lines they selected
selected_lines <- c(NA, NA, NA)
for (row in 1:(nrow(d))) {
if (d[row,]$selected_or_released == 'selected') {
selected_lines[which(is.na(selected_lines))[1]] <- d[row,]$line_id
} else {
selected_lines[!(is.na(selected_lines)) & selected_lines == d[row,]$line_id] <- NA
}
}
selected_lines_accuracy_column <- ifelse(is.na(d$line_id), NA, ifelse(d$line_id %in% selected_lines & d$line_id %in% thinnest_lines_set, 'hit', 'false_alarm'))
return(selected_lines_accuracy_column)
}
# d %>%
#   filter(participant == 90, trial_count == 2) %>%
#   group_by(participant, trial_count) %>%
#   summarize(hits = calc_accuracy(., output = 'hits'), misses = calc_accuracy(., output = 'misses'), false_alarms = calc_accuracy(., output = 'false_alarms'), accuracy = mean(accuracy, na.rm = TRUE)) %>%
#   head()
#new_d <- data.frame(participant = vector(), trial_count = vector(), hits = vector(), false_alarms = vector(), misses = vector(), accuracy = vector())
out  <- vector()
for (participant in unlist(lapply(levels(factor(d$participant)), as.integer))) {
for (trial in 1:99) {
out <- c(out, calc_accuracy_columns(d[d$participant == participant & d$trial_count == trial,]))
}
}
length(out) == nrow(d)
length(out)
nrow(d)
sum(is.na(out) )
(nrow(d) - length(out)) == nrow(d[d$pressed_object == 'submit',])
nrow(d[d$pressed_object == 'submit',])
max(d$trial_count)
out[1]
d[1]
head(d)
head(out)
calc_accuracy_columns <- function(d) {
participant <- d$participant[1]
trial <- d$trial_count[1]
thinnest_lines_set <- thinnest_lines[thinnest_lines$participant == participant & thinnest_lines$trial_count == trial,]$line_id
## determine the final three lines they selected
selected_lines <- c(NA, NA, NA)
for (row in 1:(nrow(d))) {
if (d[row,]$selected_or_released == 'selected') {
selected_lines[which(is.na(selected_lines))[1]] <- d[row,]$line_id
} else {
selected_lines[!(is.na(selected_lines)) & selected_lines == d[row,]$line_id] <- NA
}
}
selected_lines_accuracy_column <- ifelse(is.na(d$bottom_y), NA, ifelse(d$line_id %in% selected_lines & d$line_id %in% thinnest_lines_set, 'hit', 'false_alarm'))
return(selected_lines_accuracy_column)
}
# d %>%
#   filter(participant == 90, trial_count == 2) %>%
#   group_by(participant, trial_count) %>%
#   summarize(hits = calc_accuracy(., output = 'hits'), misses = calc_accuracy(., output = 'misses'), false_alarms = calc_accuracy(., output = 'false_alarms'), accuracy = mean(accuracy, na.rm = TRUE)) %>%
#   head()
#new_d <- data.frame(participant = vector(), trial_count = vector(), hits = vector(), false_alarms = vector(), misses = vector(), accuracy = vector())
out  <- vector()
for (participant in unlist(lapply(levels(factor(d$participant)), as.integer))) {
for (trial in 1:99) {
out <- c(out, calc_accuracy_columns(d[d$participant == participant & d$trial_count == trial,]))
}
}
nrow(d[d$pressed_object == 'submit',])
head(out)
length(out)
nrow(d)
participants <- unlist(lapply(levels(factor(d$participant)), as.integer))
participants
calc_accuracy_columns <- function(d) {
participant <- d$participant[1]
trial <- d$trial_count[1]
thinnest_lines_set <- thinnest_lines[thinnest_lines$participant == participant & thinnest_lines$trial_count == trial,]$line_id
## determine the final three lines they selected
selected_lines <- c(NA, NA, NA)
for (row in 1:(nrow(d))) {
if (d[row,]$selected_or_released == 'selected') {
selected_lines[which(is.na(selected_lines))[1]] <- d[row,]$line_id
} else {
selected_lines[!(is.na(selected_lines)) & selected_lines == d[row,]$line_id] <- NA
}
}
selected_lines_accuracy_column <- ifelse(is.na(d$bottom_y), NA, ifelse(d$line_id %in% selected_lines & d$line_id %in% thinnest_lines_set, 'hit', 'false_alarm'))
return(selected_lines_accuracy_column)
}
# d %>%
#   filter(participant == 90, trial_count == 2) %>%
#   group_by(participant, trial_count) %>%
#   summarize(hits = calc_accuracy(., output = 'hits'), misses = calc_accuracy(., output = 'misses'), false_alarms = calc_accuracy(., output = 'false_alarms'), accuracy = mean(accuracy, na.rm = TRUE)) %>%
#   head()
#new_d <- data.frame(participant = vector(), trial_count = vector(), hits = vector(), false_alarms = vector(), misses = vector(), accuracy = vector())
out  <- vector()
for (participant in unlist(lapply(levels(factor(d$participant)), as.integer))) {
for (trial in 0:99) {
out <- c(out, calc_accuracy_columns(d[d$participant == participant & d$trial_count == trial,]))
}
}
nrow(d) == length(out)
d %>%
filter(pressed_object == 'submit') %>%
select(participant, trial_count, accuracy) %>%
inner_join(thinnest_lines)
thinnest_lines <- d %>%
filter(pressed_object == 'submit') %>%
select(participant, trial_count, accuracy) %>%
inner_join(thinnest_lines)
head(thinnest_lines)
library(tidyverse)
library(testit)
d <- read.csv('../../data/raw/long_data/pilot/pilot_data.csv')
thinnest_lines <- read.csv('../../data/raw/line_data/pilot/thinnest_lines.csv')
head(d)
new_d
calc_accuracy_columns <- function(d) {
participant <- d$participant[1]
trial <- d$trial_count[1]
thinnest_lines_set <- thinnest_lines[thinnest_lines$participant == participant & thinnest_lines$trial_count == trial,]$line_id
## determine the final three lines they selected
selected_lines <- c(NA, NA, NA)
for (row in 1:(nrow(d))) {
if (d[row,]$selected_or_released == 'selected') {
selected_lines[which(is.na(selected_lines))[1]] <- d[row,]$line_id
} else {
selected_lines[!(is.na(selected_lines)) & selected_lines == d[row,]$line_id] <- NA
}
}
selected_lines_accuracy_column <- ifelse(is.na(d$bottom_y), NA, ifelse(d$line_id %in% selected_lines & d$line_id %in% thinnest_lines_set, 'hit', 'false_alarm'))
return(selected_lines_accuracy_column)
}
out  <- vector()
for (participant in unlist(lapply(levels(factor(d$participant)), as.integer))) {
for (trial in 0:99) {
out <- c(out, calc_accuracy_columns(d[d$participant == participant & d$trial_count == trial,]))
}
}
d$accuracy_type <- out
thinnest_lines <- d %>%
filter(pressed_object == 'submit') %>%
select(participant, trial_count, accuracy) %>%
inner_join(thinnest_lines)
head(thinnest_lines)
## summarize hits and false alarms
head(d)
## summarize hits and false alarms
d %>%
filter(!(is.na(accuracy_type))) %>%
spread(accuracy) %>%
head()
## summarize hits and false alarms
d %>%
filter(!(is.na(accuracy_type))) %>%
spread(accuracy) %>%
head(.)
## summarize hits and false alarms
d %>%
filter(!(is.na(accuracy_type))) %>%
spread(accuracy_type) %>%
head(.)
## summarize hits and false alarms
d %>%
filter(!(is.na(accuracy_type))) %>%
head()
## summarize hits and false alarms
d %>%
filter(!(is.na(accuracy_type))) %>%
mutate(hit = ifelse(accuracy_type == 'hit', 1, 0), false_alarm = ifelse(accuracy_type == 'false_alarm', 1, 0)) %>%
head()
## summarize hits and false alarms
d %>%
filter(!(is.na(accuracy_type))) %>%
mutate(hit = ifelse(accuracy_type == 'hit', 1, 0), false_alarm = ifelse(accuracy_type == 'false_alarm', 1, 0)) %>%
group_by(line_orientation) %>%
summarize(hits = sum(hit), false_alarms = sum(false_alarm))
## summarize misses
thinnest_lines <- d %>%
filter(pressed_object == 'submit') %>%
select(participant, trial_count, accuracy) %>%
inner_join(thinnest_lines)
head(thinnest_lines)
thinnest_lines %>%
filter(accuracy != 1) %>%
group_by(line_orientation) %>%
summarize(misses = n())
## summarize misses
thinnest_lines <- d %>%
filter(pressed_object == 'submit') %>%
select(participant, trial_count, accuracy) %>%
inner_join(thinnest_lines)
thinnest_lines %>%
filter(accuracy != 1) %>%
group_by(line_orientation) %>%
summarize(misses = n()) %>%
inner_join(summary_data)
## summarize hits and false alarms
summary_data <- d %>%
filter(!(is.na(accuracy_type))) %>%
mutate(hit = ifelse(accuracy_type == 'hit', 1, 0), false_alarm = ifelse(accuracy_type == 'false_alarm', 1, 0)) %>%
group_by(line_orientation) %>%
summarize(hits = sum(hit), false_alarms = sum(false_alarm))
## summarize misses
thinnest_lines <- d %>%
filter(pressed_object == 'submit') %>%
select(participant, trial_count, accuracy) %>%
inner_join(thinnest_lines)
thinnest_lines %>%
filter(accuracy != 1) %>%
group_by(line_orientation) %>%
summarize(misses = n()) %>%
inner_join(summary_data)
thinnest_lines %>%
filter(accuracy != 1) %>%
group_by(line_orientation) %>%
summarize(misses = n()) %>%
inner_join(summary_data) %>%
gather(accuracy_type, count, misses:false_alarms)
summary_data %>%
ggplot(aes(x = line_orientation, y = count)) %>%
geom_bar(stat = 'identity', aes(fill = accuracy_type), position = position_dodge(width = .9))
## summarize misses
thinnest_lines <- d %>%
filter(pressed_object == 'submit') %>%
select(participant, trial_count, accuracy) %>%
inner_join(thinnest_lines)
summary_data <- thinnest_lines %>%
filter(accuracy != 1) %>%
group_by(line_orientation) %>%
summarize(misses = n()) %>%
inner_join(summary_data) %>%
gather(accuracy_type, count, misses:false_alarms)
summary_data %>%
ggplot(aes(x = line_orientation, y = count)) +
geom_bar(stat = 'identity', aes(fill = accuracy_type), position = position_dodge(width = .9))
summary_data %>%
ggplot(aes(x = line_orientation, y = count)) +
geom_bar(stat = 'identity', aes(fill = accuracy_type), position = position_dodge(width = .9)) +
labs(
y = 'Count',
x = 'Line Orientation',
fill = 'Accuracy Type'
) +
theme_bw()
ggsave('line_orientation.png', height = 1080 / 300, width = 1920 / 300, units = 'px', dpi = 300)
ggsave('line_orientation.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
## summarize misses
thinnest_lines <- d %>%
filter(pressed_object == 'submit') %>%
select(participant, trial_count, accuracy) %>%
inner_join(thinnest_lines)
summary_data <- thinnest_lines %>%
filter(accuracy != 1) %>%
group_by(line_orientation) %>%
summarize(misses = n()) %>%
inner_join(summary_data) %>%
gather(accuracy_type, count, misses:false_alarms)
library(tidyverse)
library(testit)
d <- read.csv('../../data/raw/long_data/pilot/pilot_data.csv')
thinnest_lines <- read.csv('../../data/raw/line_data/pilot/thinnest_lines.csv')
head(d)
calc_accuracy_columns <- function(d) {
participant <- d$participant[1]
trial <- d$trial_count[1]
thinnest_lines_set <- thinnest_lines[thinnest_lines$participant == participant & thinnest_lines$trial_count == trial,]$line_id
## determine the final three lines they selected
selected_lines <- c(NA, NA, NA)
for (row in 1:(nrow(d))) {
if (d[row,]$selected_or_released == 'selected') {
selected_lines[which(is.na(selected_lines))[1]] <- d[row,]$line_id
} else {
selected_lines[!(is.na(selected_lines)) & selected_lines == d[row,]$line_id] <- NA
}
}
selected_lines_accuracy_column <- ifelse(is.na(d$bottom_y), NA, ifelse(d$line_id %in% selected_lines & d$line_id %in% thinnest_lines_set, 'hit', 'false_alarm'))
return(selected_lines_accuracy_column)
}
out  <- vector()
for (participant in unlist(lapply(levels(factor(d$participant)), as.integer))) {
for (trial in 0:99) {
out <- c(out, calc_accuracy_columns(d[d$participant == participant & d$trial_count == trial,]))
}
}
d$accuracy_type <- out
## summarize hits and false alarms
summary_data <- d %>%
filter(!(is.na(accuracy_type))) %>%
mutate(hit = ifelse(accuracy_type == 'hit', 1, 0), false_alarm = ifelse(accuracy_type == 'false_alarm', 1, 0)) %>%
group_by(line_orientation) %>%
summarize(hits = sum(hit), false_alarms = sum(false_alarm))
## summarize misses
thinnest_lines <- d %>%
filter(pressed_object == 'submit') %>%
select(participant, trial_count, accuracy) %>%
inner_join(thinnest_lines)
summary_data <- thinnest_lines %>%
filter(accuracy != 1) %>%
group_by(line_orientation) %>%
summarize(misses = n()) %>%
inner_join(summary_data) %>%
gather(accuracy_type, count, misses:false_alarms)
summary_data %>%
ggplot(aes(x = line_orientation, y = count)) +
geom_bar(stat = 'identity', aes(fill = accuracy_type), position = position_dodge(width = .9)) +
labs(
y = 'Count',
x = 'Line Orientation',
fill = 'Accuracy Type'
) +
theme_bw() +
theme(legend.position = 'bottom')
ggsave('line_orientation.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
q()
list(c(1:5), c('a', 'b', 'c'), c(1:10))
l <- list(c(1:5), c('a', 'b', 'c'), c(1:10))
l
l[1]
l[[1]]
l[[2]]
l[1:2]
l$2
l <- list(first = list('line_id'))
l <- list(first = list('line_id', 1), second = list('line_id', 2), third = list('line_id', 3))
l
l$first[[1]]
d <- data.frame(a = rep('b', 5), b = 1:5)
d
d[c(2,4),'b'] <- c(5,1)
d
for (e in l) {}
for (e in l) {
print(e)
}
rep(NA, 56)
library(tidyverse)
library(testit)
d <- read.csv('../../data/raw/long_data/pilot/pilot_data.csv')
thinnest_lines <- read.csv('../../data/raw/line_data/pilot/thinnest_lines.csv')
head(d)
calc_accuracy_columns <- function(d) {
participant <- d$participant[1]
trial <- d$trial_count[1]
thinnest_lines_set <- thinnest_lines[thinnest_lines$participant == participant & thinnest_lines$trial_count == trial,]$line_id
## determine the final three lines they selected
selected_lines <- vector(NA, NA, NA)
indices <- vector(NA, NA, NA)
for (row in 1:(nrow(d))) {
if (d[row,]$selected_or_released == 'selected') {
slot <- which(is.na(selected_lines))[1]
selected_lines[slot]<- d[row,]$line_id
indices[slot] <- row
} else {
slot <- which(!(is.na(selected_lines)) & selected_lines == d[row,]$line_id)
selected_lines[slot] <- NA
indices[slot] <- NA
}
}
selected_lines_accuracy_column <- rep(NA, nrow(d))
accuracy_code <- ifelse(selected_lines %in% thinnest_lines_set, 'hit', 'false_alarm')
selected_lines_accuracy_column[indices] <- accuracy_code
return(selected_lines_accuracy_column)
}
out  <- vector()
for (participant in unlist(lapply(levels(factor(d$participant)), as.integer))) {
for (trial in 0:99) {
out <- c(out, calc_accuracy_columns(d[d$participant == participant & d$trial_count == trial,]))
}
}
calc_accuracy_columns <- function(d) {
participant <- d$participant[1]
trial <- d$trial_count[1]
thinnest_lines_set <- thinnest_lines[thinnest_lines$participant == participant & thinnest_lines$trial_count == trial,]$line_id
## determine the final three lines they selected
selected_lines <- c(NA, NA, NA)
indices <- c(NA, NA, NA)
for (row in 1:(nrow(d))) {
if (d[row,]$selected_or_released == 'selected') {
slot <- which(is.na(selected_lines))[1]
selected_lines[slot]<- d[row,]$line_id
indices[slot] <- row
} else {
slot <- which(!(is.na(selected_lines)) & selected_lines == d[row,]$line_id)
selected_lines[slot] <- NA
indices[slot] <- NA
}
}
selected_lines_accuracy_column <- rep(NA, nrow(d))
accuracy_code <- ifelse(selected_lines %in% thinnest_lines_set, 'hit', 'false_alarm')
selected_lines_accuracy_column[indices] <- accuracy_code
return(selected_lines_accuracy_column)
}
out  <- vector()
for (participant in unlist(lapply(levels(factor(d$participant)), as.integer))) {
for (trial in 0:99) {
out <- c(out, calc_accuracy_columns(d[d$participant == participant & d$trial_count == trial,]))
}
}
d$accuracy_type <- out
head(d)
d[1:50, c('trial_count', 'accuracy', 'accuracy_type')]
## summarize hits and false alarms
summary_data <- d %>%
filter(!(is.na(accuracy_type))) %>%
mutate(hit = ifelse(accuracy_type == 'hit', 1, 0), false_alarm = ifelse(accuracy_type == 'false_alarm', 1, 0)) %>%
group_by(line_orientation) %>%
summarize(hits = sum(hit), false_alarms = sum(false_alarm))
## summarize misses
thinnest_lines <- d %>%
filter(pressed_object == 'submit') %>%
select(participant, trial_count, accuracy) %>%
inner_join(thinnest_lines)
summary_data <- thinnest_lines %>%
filter(accuracy != 1) %>%
group_by(line_orientation) %>%
summarize(misses = n()) %>%
inner_join(summary_data) %>%
gather(accuracy_type, count, misses:false_alarms)
summary_data %>%
ggplot(aes(x = line_orientation, y = count)) +
geom_bar(stat = 'identity', aes(fill = accuracy_type), position = position_dodge(width = .9)) +
labs(
y = 'Count',
x = 'Line Orientation',
fill = 'Accuracy Type'
) +
theme_bw() +
theme(legend.position = 'bottom')
d
l
v <- 1:10
which(v == 5)
q()
